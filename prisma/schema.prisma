// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  preferences   UserPreference?
  sessions      Session[]
  
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  profile       String   @default("student") // "student", "employee", "investor", "homemaker"
  categories    String   @default("[]")     // JSON array of preferred categories
  interests     String?  // JSON array of interests
  language      String   @default("en")
  timezone      String   @default("UTC")
  notifications Boolean  @default(true)
  telegramChat  String?  // Telegram chat ID for notifications
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String   @unique
  source      String?
  category    String?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // AI-generated content
  summary     String?
  impactStudent    String?
  impactEmployee   String?
  impactInvestor   String?
  impactHomemaker  String?
  
  @@map("news_articles")
}

model UserProfile {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  profile   String   // "student", "employee", "investor", "homemaker"
  interests String?  // JSON array of interests
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_profiles")
}
